{"version":3,"sources":["Form.js","Display.js","App.js","reportWebVitals.js","index.js"],"names":["Form","useState","status","setStatus","stocks","setStocks","amount","setAmount","error","setError","className","on","off","value","onChange","type","id","e","target","onClick","preventDefault","minusCalc","host","date30Ago","Date","now","date30AgoString","getFullYear","getMonth","getDate","Display","rate","setRate","median","setMedian","useEffect","fetch","then","resp","json","data","rates","USD","result","j","push","med","arr","mid","Math","floor","length","nums","sort","a","b","calcMedian","text","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yNAoCeA,MAjCf,WAAkB,IAAD,EACeC,mBAAS,OADxB,mBACNC,EADM,KACEC,EADF,OAEeF,mBAAS,KAFxB,mBAENG,EAFM,KAEEC,EAFF,OAGeJ,mBAAS,GAHxB,mBAGNK,EAHM,KAGEC,EAHF,OAIaN,oBAAS,GAJtB,mBAINO,EAJM,KAICC,EAJD,KAqBZ,OAAO,qCACR,mBAAGC,UAAU,MAAb,SAAoBF,EAAO,sBAAwB,KACnD,iCACI,wCADJ,IACsB,cAAC,IAAD,CAAQG,GAAG,MAAMC,IAAI,OAAOC,MAAOX,EAAQY,SAAUX,IAD3E,IACyF,uCAAgB,uBACrG,uBAAOY,KAAK,SAASC,GAAG,QAAQF,SAAU,SAAAG,GAAC,OAAIV,EAAUU,EAAEC,OAAOL,UAClE,uBAAOE,KAAK,SAASF,MAAOX,EAAQiB,QApBxC,SAAsBF,GAElB,GADAA,EAAEG,iBACY,QAAXlB,EAAkB,CAEjBG,EADgBD,EAASE,OAEvB,CACF,IAAMe,EAAYjB,EAASE,EACxBe,GAAa,EACZhB,EAAUgB,GAEVZ,GAAS,OAWjB,0CAAaL,EAAb,+B,QC7BFkB,EAAO,sBAEPC,EAAY,IAAIC,KAAKA,KAAKC,MAAQ,QAClCC,EAAkBH,EAAUI,cAAgB,KAAOJ,EAAUK,WAAa,GAAK,IAAM,KAAOL,EAAUK,WAAa,GAAK,IAAML,EAAUM,UAAU,KAmDzIC,MA3Cf,WAAoB,IAAD,EACS7B,mBAAS,GADlB,mBACR8B,EADQ,KACFC,EADE,OAEa/B,mBAAS,GAFtB,mBAERgC,EAFQ,KAEAC,EAFA,KAIfC,qBAAU,WACNC,MAAM,WAAD,OAAYd,EAAZ,sCACJe,MAAK,SAAAC,GAAI,OAAIA,EAAKC,UAClBF,MAAK,SAACG,GACNR,EAAQQ,EAAKC,MAAMC,UAEtB,IAEFP,qBAAU,WACNC,MAAM,WAAD,OAAYd,EAAZ,YAAoBI,EAApB,+BACJW,MAAK,SAAAC,GAAI,OAAIA,EAAKC,UAClBF,MAAK,SAACG,GACN,IAAIG,EAAS,GACb,IAAI,IAAIC,KAAKJ,EAAKC,MACfE,EAAOE,KAAKL,EAAKC,MAAMG,GAAGF,KAE7B,IAAMI,EA1Bf,SAAoBC,GAChB,IAAMC,EAAMC,KAAKC,MAAMH,EAAII,OAAS,GACpCC,EAAO,YAAIL,GAAKM,MAAK,SAACC,EAAGC,GAAJ,OAAUD,EAAIC,KACrC,OAAOR,EAAII,OAAS,IAAM,EAAIC,EAAKJ,IAAQI,EAAKJ,EAAM,GAAKI,EAAKJ,IAAQ,EAuBrDQ,CAAWb,GACvBT,EAAUY,QAEb,IAEF,IAAIW,EAAO,GAUX,OAPIA,EADD1B,IAASE,EACA,OACFF,EAAOE,EACL,MAEA,OAGL,qCACH,sEAAyCF,EAAzC,UAEA,iEAAoCE,KACpC,mDAAsBwB,SCnCfC,MAXf,WAEE,OACE,sBAAKhD,UAAU,MAAf,UACU,cAAC,EAAD,IACD,cAAC,EAAD,QCEEiD,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBxB,MAAK,YAAkD,IAA/CyB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.21b890b9.chunk.js","sourcesContent":["import React, {useState} from 'react';\r\nimport Switch from 'react-input-switch';\r\n\r\nfunction Form () {\r\n    const [status, setStatus] = useState('buy');\r\n    const [stocks, setStocks] = useState(10000);\r\n    const [amount, setAmount] = useState(0);\r\n    const [error, setError] = useState(false);\r\n\r\n    function handleStocks(e){\r\n        e.preventDefault(); \r\n        if(status === 'buy') {\r\n            const addCalc = stocks + amount;\r\n            setStocks(addCalc);\r\n        }else {\r\n            const minusCalc = stocks - amount;\r\n            if(minusCalc > -1) {\r\n                setStocks(minusCalc);\r\n            }else {\r\n                setError(true);\r\n            }\r\n        }\r\n        \r\n    }\r\n     return <>\r\n    <p className=\"red\">{error? 'Insufficient funds!' : ''}</p> \r\n    <form>\r\n        <span>sell</span> <Switch on=\"buy\" off=\"sell\" value={status} onChange={setStatus} /> <span>buy</span><br/>\r\n        <input type=\"number\" id=\"stock\" onChange={e => setAmount(e.target.value)} />\r\n        <input type=\"submit\" value={status} onClick={handleStocks} />\r\n        <p>You have {stocks} stocks in account</p>\r\n               \r\n    </form>\r\n    </>\r\n};\r\n\r\nexport default Form;","import React, {useState, useEffect} from 'react';\r\nconst host = 'api.frankfurter.app';\r\n\r\nconst date30Ago = new Date(Date.now() - 30*24*60*60*1000);\r\nconst date30AgoString = date30Ago.getFullYear() + '-' + (date30Ago.getMonth() < 10 ? '0' : '') + (date30Ago.getMonth() + 1) + '-' + date30Ago.getDate()+'..';\r\n\r\nfunction calcMedian(arr) {\r\n    const mid = Math.floor(arr.length / 2),\r\n    nums = [...arr].sort((a, b) => a - b);\r\n  return arr.length % 2 !== 0 ? nums[mid] : (nums[mid - 1] + nums[mid]) / 2;\r\n}\r\n\r\nfunction Display() {\r\n    const [rate, setRate] = useState(0);\r\n    const [median, setMedian] = useState(0);\r\n    \r\n    useEffect(()=>{\r\n        fetch(`https://${host}/latest?amount=10&from=CAD&to=USD`)\r\n        .then(resp => resp.json())\r\n        .then((data) => {\r\n         setRate(data.rates.USD);\r\n        });       \r\n    },[])\r\n\r\n    useEffect(()=>{\r\n        fetch(`https://${host}/${date30AgoString}?amount=10&from=CAD&to=USD`)\r\n        .then(resp => resp.json())\r\n        .then((data) => {\r\n         let result = []\r\n         for(var j in data.rates) {\r\n            result.push(data.rates[j].USD);\r\n         }\r\n         const med = calcMedian(result);\r\n         setMedian(med);\r\n        });\r\n    },[]);\r\n\r\n    let text = \"\";\r\n   \r\n    if(rate === median) { \r\n        text =  \"hold\";\r\n    } else if(rate > median) { \r\n        text =  \"buy\";\r\n    } else {\r\n        text =  \"sell\";\r\n    }\r\n\r\n    return <>\r\n        <p>TODAY rate for 10 dollars CAD to buy {rate} USD</p>\r\n\r\n        <p>Median rate for last 30 days is {median}</p>\r\n        <p>Today is good for {text}</p>\r\n    </>\r\n}\r\n\r\nexport default Display;","import React from 'react'\nimport './App.css';\nimport Form from './Form.js';\nimport Display from './Display.js';\n\nfunction App() {\n\n  return (\n    <div className=\"App\">\n              <Display />\n             <Form />\n\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}